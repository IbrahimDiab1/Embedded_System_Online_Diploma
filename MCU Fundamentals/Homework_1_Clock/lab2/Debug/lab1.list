
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c4  080002cc  000102cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c4  080002c4  000102cc  2**0
                  CONTENTS
  4 .ARM          00000000  080002c4  080002c4  000102cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c4  080002cc  000102cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c4  080002c4  000102c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002c8  080002c8  000102c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000912  00000000  00000000  000102f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ab  00000000  00000000  00010c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001d08  00000000  00000000  00010e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000628  00000000  00000000  00012b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007fd8  00000000  00000000  00013160  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b138  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001b1b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002ac 	.word	0x080002ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002ac 	.word	0x080002ac

08000170 <main>:
#define GPIOA_CRH    *(volatile uint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_ODR    *(volatile uint32_t *)(GPIOA_BASE + 0x0C)


int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= (1<<2);
 8000176:	4b22      	ldr	r3, [pc, #136]	; (8000200 <main+0x90>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a21      	ldr	r2, [pc, #132]	; (8000200 <main+0x90>)
 800017c:	f043 0304 	orr.w	r3, r3, #4
 8000180:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= 0xFF0FFFFF;
 8000182:	4b20      	ldr	r3, [pc, #128]	; (8000204 <main+0x94>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a1f      	ldr	r2, [pc, #124]	; (8000204 <main+0x94>)
 8000188:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800018c:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 800018e:	4b1d      	ldr	r3, [pc, #116]	; (8000204 <main+0x94>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a1c      	ldr	r2, [pc, #112]	; (8000204 <main+0x94>)
 8000194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000198:	6013      	str	r3, [r2, #0]
	//Bits 2:0   101: HSI clock selected
	RCC_CFGR |=(1<<2)|(1);
 800019a:	4b1b      	ldr	r3, [pc, #108]	; (8000208 <main+0x98>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a1a      	ldr	r2, [pc, #104]	; (8000208 <main+0x98>)
 80001a0:	f043 0305 	orr.w	r3, r3, #5
 80001a4:	6013      	str	r3, [r2, #0]

	//Bits 10:8  100: HCLK divided by 2 for APB1
	RCC_CFGR |=(1<<10);
 80001a6:	4b18      	ldr	r3, [pc, #96]	; (8000208 <main+0x98>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a17      	ldr	r2, [pc, #92]	; (8000208 <main+0x98>)
 80001ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001b0:	6013      	str	r3, [r2, #0]

	//Bits 13:11  101: HCLK divided by 4 for APB	2
	RCC_CFGR |=(1<<11)|(1<<13);
 80001b2:	4b15      	ldr	r3, [pc, #84]	; (8000208 <main+0x98>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a14      	ldr	r2, [pc, #80]	; (8000208 <main+0x98>)
 80001b8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80001bc:	6013      	str	r3, [r2, #0]

	while(1)
	{
		GPIOA_ODR |=(1<<13);
 80001be:	4b13      	ldr	r3, [pc, #76]	; (800020c <main+0x9c>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a12      	ldr	r2, [pc, #72]	; (800020c <main+0x9c>)
 80001c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001c8:	6013      	str	r3, [r2, #0]
		for(int i=0; i<1000;i++);
 80001ca:	2300      	movs	r3, #0
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	e002      	b.n	80001d6 <main+0x66>
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	3301      	adds	r3, #1
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001dc:	dbf8      	blt.n	80001d0 <main+0x60>
		GPIOA_ODR &=~(1<<13);
 80001de:	4b0b      	ldr	r3, [pc, #44]	; (800020c <main+0x9c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a0a      	ldr	r2, [pc, #40]	; (800020c <main+0x9c>)
 80001e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001e8:	6013      	str	r3, [r2, #0]
		for(int i=0;i<1000;i++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	603b      	str	r3, [r7, #0]
 80001ee:	e002      	b.n	80001f6 <main+0x86>
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	3301      	adds	r3, #1
 80001f4:	603b      	str	r3, [r7, #0]
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001fc:	dbf8      	blt.n	80001f0 <main+0x80>
		GPIOA_ODR |=(1<<13);
 80001fe:	e7de      	b.n	80001be <main+0x4e>
 8000200:	40021018 	.word	0x40021018
 8000204:	40010804 	.word	0x40010804
 8000208:	40021004 	.word	0x40021004
 800020c:	4001080c 	.word	0x4001080c

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 f811 	bl	8000264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ff95 	bl	8000170 <main>

08000246 <LoopForever>:

LoopForever:
    b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	080002cc 	.word	0x080002cc
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	2000001c 	.word	0x2000001c

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>
	...

08000264 <__libc_init_array>:
 8000264:	b570      	push	{r4, r5, r6, lr}
 8000266:	2500      	movs	r5, #0
 8000268:	4e0c      	ldr	r6, [pc, #48]	; (800029c <__libc_init_array+0x38>)
 800026a:	4c0d      	ldr	r4, [pc, #52]	; (80002a0 <__libc_init_array+0x3c>)
 800026c:	1ba4      	subs	r4, r4, r6
 800026e:	10a4      	asrs	r4, r4, #2
 8000270:	42a5      	cmp	r5, r4
 8000272:	d109      	bne.n	8000288 <__libc_init_array+0x24>
 8000274:	f000 f81a 	bl	80002ac <_init>
 8000278:	2500      	movs	r5, #0
 800027a:	4e0a      	ldr	r6, [pc, #40]	; (80002a4 <__libc_init_array+0x40>)
 800027c:	4c0a      	ldr	r4, [pc, #40]	; (80002a8 <__libc_init_array+0x44>)
 800027e:	1ba4      	subs	r4, r4, r6
 8000280:	10a4      	asrs	r4, r4, #2
 8000282:	42a5      	cmp	r5, r4
 8000284:	d105      	bne.n	8000292 <__libc_init_array+0x2e>
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800028c:	4798      	blx	r3
 800028e:	3501      	adds	r5, #1
 8000290:	e7ee      	b.n	8000270 <__libc_init_array+0xc>
 8000292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000296:	4798      	blx	r3
 8000298:	3501      	adds	r5, #1
 800029a:	e7f2      	b.n	8000282 <__libc_init_array+0x1e>
 800029c:	080002c4 	.word	0x080002c4
 80002a0:	080002c4 	.word	0x080002c4
 80002a4:	080002c4 	.word	0x080002c4
 80002a8:	080002c8 	.word	0x080002c8

080002ac <_init>:
 80002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ae:	bf00      	nop
 80002b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b2:	bc08      	pop	{r3}
 80002b4:	469e      	mov	lr, r3
 80002b6:	4770      	bx	lr

080002b8 <_fini>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	bf00      	nop
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr
